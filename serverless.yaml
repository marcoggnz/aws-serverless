service: aws-serverless

provider:
  name: aws
  runtime: python3.11
  region: eu-west-1
  stage: dev
  environment:
    API_ENDPOINT: "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
    CommentsTable: comments
    AdsTable: ads

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CommentsTable}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AdsTable}"

plugins:
  - serverless-s3-sync
  - serverless-finch
  
custom:
  finch:
    stage: ${opt:stage, self:provider.stage}
    variables:
      API_ENDPOINT: ${self:provider.environment.API_ENDPOINT}

  client:
    bucketName: web-serverless25
    distributionFolder: web
    errorDocument: index.html
    include:
      - '*.html'
      - '*.css'
      - '*.js'
  s3Sync:
    - bucketName: web-serverless25
      localDir: web

functions:
  getApiEndpoint:
    handler: handler.get_api_endpoint
    events:
      - http:
          path: /get-api-endpoint
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
            allowCredentials: false

  insertMessage:
    handler: handler.insert_message
    events:
      - http:
          path: /insert-message
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
            allowCredentials: false

  getMessages:
    handler: handler.get_messages
    events:
      - http:
          path: /get-messages
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
            allowCredentials: false

  insertProduct:
    handler: handler.insert_product
    events:
      - http:
          path: /insert-product
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
            allowCredentials: false

  getProduct:
    handler: handler.get_products
    events:
      - http:
          path: /get-products
          method: get
          cors: true

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:provider.stage}-api-datahack
        Description: API ${self:service}

    StaticSiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: datahack-cloud
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
        WebsiteConfiguration:
          IndexDocument: index.html
        VersioningConfiguration:
          Status: Enabled

    WebsiteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          HttpVersion: 'http2'
          Origins:
            - DomainName: !GetAtt StaticSiteBucket.DomainName
              Id: StaticSiteOrigin
              S3OriginConfig:
                OriginAccessIdentity: ''
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: StaticSiteOrigin
            ForwardedValues:
              QueryString: 'false'
            ViewerProtocolPolicy: redirect-to-https

    StaticSiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: datahack-cloud
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::datahack-cloud/*"

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: datahack-mensajes
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
      UpdateReplacePolicy: Retain

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: datahack-productos
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
      UpdateReplacePolicy: Retain  
